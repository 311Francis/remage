#include <sstream>
#include <fstream>
#include <stdexcept>

#include "globals.hh"

template <typename T>
inline void RMGLog::Print(RMGLog::LogLevel loglevelfile, RMGLog::LogLevel loglevelscreen, const T& msg, bool prefixed, bool do_flush) {

  // open log file if not opened
  if (RMGLog::IsOpen()) {
    // write message in to log file
    if (loglevelfile >= RMGLog::fMinimumLogLevelFile) {
      if (prefixed) RMGLog::fOutputFileStream << RMGLog::GetPrefix(loglevelfile, RMGLog::fOutputFileStream);
      RMGLog::fOutputFileStream << msg;
      if (do_flush) RMGLog::fOutputFileStream << std::flush;
    }
  }

  // write message to screen
  if (loglevelscreen >= RMGLog::fMinimumLogLevelScreen) {
    std::ostream& strm = loglevelscreen > RMGLog::LogLevel::warning ? G4cout : G4cerr;
    if (prefixed) strm << RMGLog::GetPrefix(loglevelscreen, strm);
    strm << msg;
    if (do_flush) strm << std::flush;
  }
}

// ---------------------------------------------------------

template <typename T>
inline void RMGLog::Out(RMGLog::LogLevel loglevelfile, RMGLog::LogLevel loglevelscreen, const T& message) {
  // if this is the first call to Out(), call StartupInfo() first
  if (!RMGLog::fFirstOutputDone) RMGLog::StartupInfo();

  RMGLog::Print(loglevelfile, loglevelscreen, message, true);
  RMGLog::Print(loglevelfile, loglevelscreen, "\n", false);

  // throw exception if error is fatal
  if (loglevelfile == fatal or loglevelscreen == fatal) {
    throw std::runtime_error("A fatal exception has occurred, the execution cannot continue.");
  }
}

// ---------------------------------------------------------

template <typename T, typename... Args>
inline void RMGLog::Out(RMGLog::LogLevel loglevelfile, RMGLog::LogLevel loglevelscreen, const T& t, const Args&... args) {

  // if this is the first call to Out(), call StartupInfo() first
  if (!RMGLog::fFirstOutputDone) RMGLog::StartupInfo();

  RMGLog::Print(loglevelfile, loglevelscreen, t, true, false);
  (RMGLog::Print(loglevelfile, loglevelscreen, args, false, false), ...);
  RMGLog::Print(loglevelfile, loglevelscreen, "\n", false);

  // throw exception if error is fatal
  if (loglevelfile == fatal or loglevelscreen == fatal) {
    throw std::runtime_error("A fatal exception has occurred, the execution cannot continue.");
  }
}

// ---------------------------------------------------------

template <typename... Args>
inline void RMGLog::OutFormat(RMGLog::LogLevel loglevelfile, RMGLog::LogLevel loglevelscreen, const std::string& fmt, const Args&... args) {
    try {
        RMGLog::Out(loglevelfile, loglevelscreen, fmt::format(fmt, args...));
    }
    catch (fmt::v8::format_error& e) {
        RMGLog::Out(RMGLog::error, "fmt library exception caugth: ", e.what());
    }
}

// ---------------------------------------------------------

template <RMGLog::Ansi color, typename T>
inline std::string RMGLog::Colorize(const T& msg, std::ostream& os, bool bold) {

  // check terminal capabilities before
  if (!RMGLog::SupportsColors(os)) return msg;

  std::ostringstream ss;
  ss << "\033[" << (bold ? "1;" : "") << color << "m" << msg << "\033[0m";
  return ss.str();
}

// vim: tabstop=2 shiftwidth=2 expandtab ft=cpp
